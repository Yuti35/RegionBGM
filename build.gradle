buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
		gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
//apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

version = '1.12.2-1.0.0'
group = 'com.yuti.regionbgm' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'regionbgm'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    // Configuration that holds JARs to embed inside the mod JAR
    embed
    // Make embedded dependencies actually available during compilation/to IDEs
    implementation.extendsFrom embed
}

repositories {
  mavenCentral()
  maven {
    url 'https://m2.dv8tion.net/releases'
  }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    shadow 'com.sedmelluq:lavaplayer:1.3.77'
}

import java.util.jar.JarFile
shadowJar {
    project.configurations.shadow.setTransitive(true);
    configurations = [project.configurations.shadow]

    classifier '' // Replace the default JAR
}


task relocateDependencies(type: DefaultTask) {
	def packages = [] as Set<String>
        tasks.shadowJar.configurations.each { configuration ->
            configuration.files.each { jar ->
                JarFile jf = new JarFile(jar)
                jf.entries().each { entry ->
                    if (entry.name.endsWith(".class") && entry.name != "module-info.class") {
                        packages << entry.name[0..entry.name.lastIndexOf('/')-1].replaceAll('/', '.')
                    }
                }
                jf.close()
            }
        }
	packages.each {
        if(!it.startsWith("com.sedmelluq")) {
            tasks.shadowJar.relocate(it, "dependencies.${it}")        	
        }
    }
}

tasks.shadowJar.dependsOn tasks.relocateDependencies

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}

task deobfJar(type: Jar) { // Generate deobfuscated

    from shadowJar.outputs.files.collect{ 
    	zipTree(it)
    }
    
    manifest {
        attributes([
            "Specification-Title": "regionbgm",
            "Specification-Vendor": "yuti",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"yuti",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    from('./') {
		include("LICENSE")
		include("LICENSE-DEPENDENCIES")
		include("NOTICE")
	}
	exclude("module-info.class")
	exclude("META-INF/**")

    classifier = 'deobf'

}

jar {
    from deobfJar.outputs.files.collect{ zipTree(it) }
    manifest {
        attributes([
            "Specification-Title": "regionbgm",
            "Specification-Vendor": "yuti",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"yuti",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    from('./') {
		include("LICENSE")
		include("LICENSE-DEPENDENCIES")
		include("NOTICE")
	}
	exclude("module-info.class")
	exclude("META-INF/**")
}

tasks.deobfJar.dependsOn tasks.shadowJar

tasks.jar.dependsOn tasks.deobfJar


task sourceJar(type: Jar) { // Generate sources

    from sourceSets.main.allSource

    classifier = 'sources'
    
    manifest {
        attributes([
            "Specification-Title": "regionbgm",
            "Specification-Vendor": "yuti",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"yuti",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    
    from('./') {
		include("LICENSE")
	}
}

tasks.build.dependsOn('sourceJar', 'deobfJar')

artifacts {
    archives deobfJar

    archives sourceJar
    
    archives jar
}

javadoc {
	title = "RegionBGM " + project.version + " API"
    destinationDir = file("$rootDir/docs")
}

